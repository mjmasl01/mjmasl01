---
title: "Section 15: REactivity"
format: html
---


# 15.2 Another Example Tennis App


```{r}
library(tidyverse)

theme_set(theme_minimal())

atp_df <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2023.csv")
wta_df <- read_csv("https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2023.csv")

both_df <- bind_rows(atp_df, wta_df)

both_long <- both_df |> pivot_longer(c(winner_name, loser_name))

## only keep players who have player over 50 matches
both_n50 <- both_long |> group_by(value) |> summarise(n = n()) |>
  filter(n > 50)

## construct various statistics
major_tennis <- semi_join(both_long, both_n50, by = c("value"))
major_tennis <- major_tennis |> mutate(w_svperc = 100 * w_1stIn / w_svpt,
                        l_svperc = 100 * l_1stIn / l_svpt,
                        w_firstwon = 100 * w_1stWon / w_1stIn,
                        l_firstwon = 100 * l_1stWon / l_1stIn,
                        w_secondwon = 100 * w_2ndWon / (w_svpt - w_1stIn),
                        l_secondwon = 100 * l_2ndWon / (l_svpt - l_1stIn))
```

```{r}
major_tennis_w <- major_tennis |> filter(name == "winner_name")
major_tennis_l <- major_tennis |> filter(name == "loser_name")

w_small <- major_tennis_w |> select(value, winner_seed, w_ace, w_df,
                                    w_svperc, w_firstwon, w_secondwon) |>
  rename(seed = winner_seed, ace = w_ace, df = w_df, svperc = w_svperc,
         firstwon = w_firstwon, secondwon = w_secondwon)

l_small <- major_tennis_l |> select(value, loser_seed, l_ace, l_df,
                                    l_svperc, l_firstwon, l_secondwon) |>
  rename(seed = loser_seed, ace = l_ace, df = l_df, svperc = l_svperc,
         firstwon = l_firstwon, secondwon = l_secondwon)

df <- bind_rows(w_small, l_small) |>
  rename(player = "value")
df
```

Now, we have our five variables (ace, df, svperc, firstwon, and secondwon). We want an app that lets that user make a histogram of one of these variables for a player of their choosing.

We will try to use a similar workflow for this problem as we did for the majors app.

## Steps

### Step 1: 

*Make a histogram of one variable for one specific player.*

```{r}
df %>%
  filter(player == "Frances Tiafoe") %>%
  ggplot(aes(x = ace)) +
  geom_histogram(bins = 30, colour = "navy", fill = "lightblue") +
  labs(title = "Histogram of Aces for Frances Tiafoe",
       x = "Aces",
       y = "Frequency")
```



### Step 2: 

*Set up our shiny app inputs. Before, we just had a single input. Now, we will have two: one for player and one for variable. Let’s focus on one at a time, doing player first. Type shinyapp and click on the R Studio snippet to bring up a base app.*

### Step 3: 

*Now that we have one of our inputs in the UI, let’s work on the server. First, we will ignore the input$ selector and put in our graph from step 1. We again use the plotOutput(), renderPlot({}) combination.*

### Step 4: 

*Now we want to connect the input defined in the UI to the server so that the graph changes depending on which player we select.*

### Step 5: 

*Now we repeat some of these steps for a second input: a variable that the user selects. We will use radioButtons() as the input in the UI.*

*We will discuss why we need to take some extra steps to perform the “user can select a variable” operation in class. In particular, we will need to briefly discuss tidy evaluation to use some of the tidyverse functions in shiny.*

### Step 6: 

*Finally, we will add a third input that will let the user change the number of bins in the histogram.*


### Step 7: 

*Use the glue() function from the glue package to change the title of the histogram to include the name of the player in the plot.*

I used paste() instead()

```{r}
library(shiny)
library(plotly)

unique_player_vec <- unique(df$player)

ui <- fluidPage(
  titlePanel("Tennis App"),
  sidebarLayout(
    sidebarPanel(
      selectizeInput("player_choice",
                     label = "Choose Player(s):",
                     choices = unique_player_vec,
                     multiple = TRUE,
                     selected = "Frances Tiafoe"),
      radioButtons("variable_choice",
                   label = "Choose a Variable:",
                   choices = c("ace", "df", "svperc", "firstwon", "secondwon"),
                   selected = "ace"),
      sliderInput("bin_sel",
                  label = "Number of Bins:",
                  min = 1,
                  max = 100,
                  value = 30)
    ),
    mainPanel(
      plotlyOutput("hist", width = "100%", height = "600px")
    )
  )
)

server <- function(input, output) {
  output$hist <- renderPlotly({
    df_filtered <- df %>%
      filter(player %in% input$player_choice)
    plot <- 
      ggplot(df_filtered, aes_string(x = input$variable_choice)) +
      geom_histogram(colour = "navy", fill = "lightblue", stat = "count", bins = input$bin_sel) +
      facet_wrap(~player, scales = "free") +
      labs(title = paste("Histogram of", input$variable_choice, "for Player(s):", paste(input$player_choice, collapse = ", ")),
           x = input$variable_choice,
           y = "Frequency") +
      theme(plot.title = element_text(hjust = 0.5, size = 20))
    ggplotly(plot, tooltip = c("x", "y")) 
  })
}

shinyApp(ui = ui, server = server)
```






# 15.4 Other Useful Things for shiny


```{r}
subset_by_cyl <- function(cyl_val) {
  mtcars |> filter(cyl == cyl_val)
}
subset_by_cyl(cyl_val = 8)
# similar to filtering the majors data by a particular major
# no issues because cyl_val is not an input for a variable in the data set

plot_mtscatter <- function(x_var, y_var) {
  ggplot(data = mtcars, aes(x =.data[[x_var]], y = .data[[y_var]])) +
    geom_point() +
    theme_minimal()
}

plot_mtscatter(x_var = "hp", y_var = "mpg")
```

```{r}

sort_mtcars <- function(var_sort) {
  mtcars |> arrange(var_sort)
}
sort_mtcars(var_sort = "mpg")

select_mtcars <- function(var_select) {
  mtcars |> select(var_select)
}
select_mtcars(var_select = "mpg")
```









