---
title: "Network Graphs"
author: "Matt Maslow"
format: html
---

# 11.4.1 Data Prep


## Exercise 1a. 
*In the example described above, what are the nodes or vertices? What are the edges?*

`Nodes` - The different majors

`vertices` - if two major ares connected together, then it would represent a double major ( a connection)

`edges` - the connections between the majors



## Exercise 1b. 
*For which of the following examples would a network graph be appropriate? For any where a network graph is not appropriate, what graph might you construct instead?*

* You are interested in examining how the number of students double majoring at SLU has changed through time. - hard to rep time in network graph

* You are interested in exploring what other fields statistics majors at SLU major or minor in most often.

`* You obtain data on all seniors at SLU with an instagram account and want to explore the instagram relationships between different members of the class.`

* You obtain data on all seniors at SLU with an instagram account and want to expore if there is an association between number of instagram “followers” and GPA. - would just do a scatterplot for this one


The third secenario would be best represented by a network graph.



```{r}
library(tidyverse)
library(readxl)
library(here)
df <- read_excel(here::here("data/slu_graduates_17_23.xlsx"))

#### fixes error in the data
df <- df |> mutate(across(everything(),
                          .fns = ~replace(., . ==  "STATS" , "STAT")))

majors_long <- df |> filter(!is.na(major3) | !is.na(major2)) |>
  pivot_longer(c(major1, major2, major3),
               names_to = "major_num",
               values_to = "major") |>
  filter(!is.na(major)) |>
  dplyr::select(-minor1, -sex, -minor2, -minor3, -graduation_year)
```

```{r}
network_df <- majors_long |>
  group_by(adm_id) |>
  reframe(test = t(combn(major, 2))) |>
  mutate(vertex1 = test[ ,1],
         vertex2 = test[ ,2]) |>
  dplyr::select(-test)
network_df
```

## Exercise 2. 
*What does the reframe() function do? Use ?reframe to help figure out what this experimental function is doing.*

it relaxes the assumption of sumarize, where it believes there should be only one row per group when it returns its output.... and.....

creates a new data frame by applying functions to columns of an existing data frame. It is most similar to summarise(), with two big differences:

  reframe() can return an arbitrary number of rows per group, while summarise() reduces each group down to a single row.

  reframe() always returns an ungrouped data frame, while summarise() might return a grouped or rowwise data frame, depending on the scenario.


## Exercise 3. 
*The code above is fairly complicated to accommodate for the fact that there are triple majors in the data set. Why does the existence of triple majors in the data set make the wrangling much more complicated than if there were just double majors?*

*Next, when creating the network graph, we will want to use the number of students with a particular double-major combination to adjust the edge line thickness so that more popular double majors are connected with a thicker edge. So, we need to make a data frame that counts up the number of students with each major combination:*

```{r}
network_sum <- network_df |> mutate(major_first = if_else(vertex1 > vertex2,
                                           true = vertex2,
                                           false = vertex1),
                     major_second = if_else(vertex1 > vertex2,
                                            true = vertex1,
                                            false = vertex2)) |>
  dplyr::select(-vertex1, -vertex2) |>
  group_by(major_first, major_second) |>
  summarise(n_majors = n()) |>
  filter(n_majors >= 5) #### only keep combos with 5 or more students
network_sum
```



## Exercise 4. 
*Examine the mutate() statement in the code chunk above. What is this statement doing, and, why is it necessary to do something like this here?*

The mutate statement is creating a new column called major_first and major_second. It is necessary to do this because we want to count the number of students with each major combination. This is necessary to do because we want to adjust the edge line thickness so that more popular double majors are connected with a thicker edge. 


## Exercise 5. 
*Examine the filter() statement in the code chunk above. What is this statement doing, and why do you think this filter() statement is here?*

Filtering out the combinations with less than 5 students. This is here because we want to only keep combos with 5 or more students. Allow us to create a cleaner vizual by filter out connections therefore decreasing the amount of edges we will have




# 11.4.2 Creating a Network Graph Object

```{r}
library(tidygraph)
```
## creating the nodes

```{r}
nodes <- df |> filter(!is.na(major3) | !is.na(major2)) |>
  pivot_longer(c(major1, major2, major3),
               names_to = "major_num",
               values_to = "major") |>
  filter(!is.na(major)) |>
  distinct(major) |> ## keep only one row for each unique major
  rename(label = major) |>
  ## only keep the majors that are found in network_sum
  filter(label %in% c(network_sum |> pull(major_first),
                      network_sum |> pull(major_second))) |>
  rowid_to_column("id")
nodes
```

## creating the edge combinations

```{r}
edges <- left_join(network_sum, nodes, by = join_by(major_first == label)) |>
  rename(from = "id") |>
  left_join(nodes, by = join_by(major_second == label)) |>
  rename(to = "id") |>
  ungroup() |>
  dplyr::select(to, from, n_majors)
edges
```

## creating tibble with the nodes and edges

```{r}
(network_obj <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE))
```

## Exercise 6
*Notice that we specified a third argument, directed, to be set to FALSE, indicating that we are not making a directed graph. Directed network graphs are more useful if it makes sense for the edges to follow a particular “direction.” Would it make sense to use a directed network graph for the hypothetical hockey team pass example? Why or why not?*






# 11.4.3 Creating the Network Graph

```{r}
library(ggraph)

ggraph(network_obj |> mutate(centrality = centrality_authority()),
                            layout = "stress") +
  geom_edge_link(aes(width = n_majors), alpha = 0.7, show.legend = FALSE) +
  geom_node_point(aes(colour = label,
                      size = centrality)) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_text(aes(label = label), repel = TRUE)  +
  scale_colour_viridis_d() +
  # get rid of the Centrality legend, and keeping only the color legend
  guides(size = "none")
  
```

## Exercise 7. 
*Something that can really help the readability of these network graphs is to use colour to group nodes together in a logical way. Go back to the nodes data frame and create a new variable called major_type that is*

`equal to MCSS for MATH, CS, STAT, and EC_MA, equal to Science for BIOL, PSYC, and PHYS, equal to Social Science for ECON, EN_EC, EC_SP, SOC, ANTH, GOVT, and BUSLA equal to Arts and Humanities for all other majors (can use the .default argument to case_when() for this).`

*Then, use this new variable to colour the nodes, adjusting the default colour scale to be colour vision deficient friendly. Does it look like the network graph naturally groups together majors from similarly fields?*


```{r}
nodes <- nodes |>
  mutate(major_type = case_when(label %in% c("MATH", "CS", "STAT", "EC_MA") ~ "MCSS",
                                label %in% c("BIOL", "PSYC", "PHYS") ~ "Science",
                                label %in% c("ECON", "EN_EC", "EC_SP", "SOC", "ANTH", "GOVT", "BUSLA") ~ "Social Science",
                                TRUE ~ "Arts and Humanities"))
(network_obj <- tbl_graph(nodes = nodes, edges = edges, directed = FALSE))
```


## Exercise 8. 
*We’ve lived a little dangerously and have glossed over a couple of important details. The first is the choice of layout. Examine `https://ggraph.data-imaginist.com/articles/Layouts.html` and try changing the layout to see if it improves the interpretability of the plot. Note that some layouts are only for directed network graphs!*

```{r}
ggraph(network_obj |> mutate(centrality = centrality_authority()),
                            layout = "fr") +
  geom_edge_link(aes(width = n_majors), alpha = 0.7, show.legend = FALSE) +
  geom_node_point(aes(colour = major_type,
                      size = centrality), show.legend = FALSE) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_text(aes(label = label), repel = TRUE)
```


## Exercise 9. 
*The other major concept that we glossed over was the idea of a centrality measure, which is used to adjust the size of the nodes. Examine `https://bookdown.org/markhoff/social_network_analysis/centrality.html` and explain how a “degree” measure tries to measure centrality. Change centrality_authority() to centrality_degree() in your graph above.*

```{r}
ggraph(network_obj |> mutate(centrality = centrality_degree()),
                            layout = "fr") +
  geom_edge_link(aes(width = n_majors), alpha = 0.7, show.legend = FALSE) +
  geom_node_point(aes(colour = major_type,
                      size = centrality), show.legend = FALSE) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_text(aes(label = label), repel = TRUE)
```

# 11.5 Your Turn

## Exercise 1. 
*Examine the following correlation plot from simulated data. Based on the correlation plot alone, does it look like there is any relationship between x1 and y? Does it look like there is any relationship between x2 and y?*

```{r}
library(GGally)
set.seed(1414111)
x1 <- rnorm(100, 0, 1)
x2 <- seq(-1, 1, length.out = 100)
y <- 4 + 0 * x1 + 1 * x2^2 + rnorm(100, 0, 0.1)
df <- tibble(x1 = x1, x2 = x2, y = y)
ggcorr(data = df)
```
Between x1 and y there could be some close similarity/corr but the colors do not entirely match up, and there is no relationship between x2 and y.


## Exercise 2
*Construct a simple scatterplot of y vs. x1. Then, construct a simple scatterplot of y vs. x2. Does it look like there is a relationship between y and x1? Between y and x2?*

```{r}
ggplot(data = df, aes(x = x1, y = y)) +
  geom_point()
  
ggplot(data = df, aes(x = x2, y = y)) +
  geom_point()
```

There does seem to be a relationship between y and x2 (quadratic curve almost/parabola), but not between y and x1.

## Exercise 3. 
*Using what you saw from the previous two exercises, explain why it is flawed to only look at a correlation plot to assess the relationship between variables.*

The correlation plot does not show the relationship between the variables, it only shows the correlation between the variables. The scatterplot shows the relationship between the variables, and it is clear that the correlation plot does not show the relationship between the variables.


## Exercise 4.

```{r}
install.packages("gapminder")
library(gapminder)
gapminder_df <- gapminder |> filter(year == 2002 | year == 2007)
gapminder_df
```

*Construct a set of side-by-side boxplots where the y-axis is lifeExp and the x-axis is year. What would you conclude? Why is the graph flawed?*

```{r}
ggplot(data = gapminder_df, aes(x = as.factor(year), y = lifeExp)) +
  geom_boxplot()
```

This boxplot is flawed because it does not show the life expectancy for each country, only the average life expectancy for each year. It would be better to show the life expectancy for each country for each year. Also, hard to compare both years since there is not a lot of difference to look at in the boxplot.

*Another option in examining a change in lifeExp would be to construct a graph of the differences in life expectancy for each country. Do so here. What information do we lose from the graph of differences?*

```{r}
gapminder_df <- gapminder_df |> group_by(country) |> mutate(diff_lifeExp = lifeExp - lag(lifeExp))
gapminder_df
```




*A very common option for looking at paired data is a line plot. Construct a line plot for the life expectancy example here. To make the plot look a little nicer, try the following: (i) use alpha, (ii), colour the points one color if the life expectancy increased between 2002 and 2007 and another colour if the life expectancy decreased.*

```{r}
ggplot(data = gapminder_df, aes(x = country, y = diff_lifeExp, group = country)) +
  geom_line() +
  geom_point(aes(colour = ifelse(diff_lifeExp > 0, "Increased", "Decreased")), alpha = 0.5) 
```
```{r}
gapminder_diff <- gapminder_diff |> mutate(change = ifelse(diff_lifeExp > 0, "increase", "decrease"))

gapminder_df <- left_join(gapminder_df, gapminder_diff, by = "country")

ggplot(data = gapminder_df, aes(x = year,
                                y = lifeExp)) +
  geom_line(aes(group=country, color=code_lifeExp), alpha=0.3) +
  theme_minimal()
```





# I he rushed towards the end so I added some of his notes below here starting at exercise 6 from 11.4

Exercise 6. A directed network graph would incorporate thbe "direction" of the passes between hockey players, so it would make more sense here.


```{r}
library(ggraph)

ggraph(network_obj |> mutate(centrality = centrality_authority()),
                            layout = "stress") +
  geom_edge_link(aes(width = n_majors), alpha = 0.7,
                 show.legend = FALSE) +
  geom_node_point(aes(colour = major_type,
                      size = centrality)) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_text(aes(label = label), repel = TRUE) +
  scale_colour_viridis_d() +
  guides(size = "none")
```

## Your Turn

Your Turn 1 through 3

```{r}
## set.seed() sets R's random number generator
## so that we all get the same simulated data
set.seed(1414111)
x1 <- rnorm(100, 0, 1)
x2 <- seq(-1, 1, length.out = 100)
y <- 4 + 0 * x1 + 1 * x2^2 + rnorm(100, 0, 0.1)
df <- tibble(x1 = x1, x2 = x2, y = y)
ggcorr(data = df)
```

Based on the correlation plot, it looks like there is no association between x1 and y or between x2 and y.

Exercise 2.

```{r}
ggplot(data = df, aes(x = x1, y = y)) +
  geom_point()

ggplot(data = df, aes(x = x2, y = y)) +
  geom_point()
```

We see that there actually is a relationship between y and x2: it's just a non-linear relationship. `ggcorr()` is not perfect because it won't pick up on any non-linear relationship (as the correlation coefficient is only used for linear associations).

Your Turn 4. 

```{r}
library(gapminder)
gapminder_df <- gapminder |> filter(year == 2002 | year == 2007)
gapminder_df

## a
ggplot(data = gapminder_df, aes(x = factor(year), 
                                y = lifeExp)) +
  geom_boxplot(colour = "orchid4", fill = "orchid1") +
  labs(x = "Year")
## this is __not__ a great plot for paired data because
## the plot assumes that each observation comprising
## the boxplots are independent (when, in fact,
## each country is represented twice).

## b
gapminder_diff <- gapminder_df |> group_by(country) |>
  summarise(diff_life = diff(lifeExp))
ggplot(gapminder_diff, aes(x = diff_life)) +
  geom_histogram(colour = "darkorchid4",
                 fill = "darkorchid1",
                 bins = 20) +
  theme_minimal()
```

























